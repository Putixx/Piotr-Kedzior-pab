class Node {
    constructor(data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }

    childlessCount() {
        if (this === null) return 0;

        let x = 0;

        if (this.left === null && this.right === null) {
            x++;
        }
        if (this.left) {
            x += this.left.childlessCount();
        }
        if (this.right) {
            x += this.right.childlessCount();
        }
        return x;
    }

    pathMostEdges() {
        if (this === null) return 0;
    
        let max = 0;
        let x = 0;
    
        if (this.left) {
            x += pathMostEdgesHelper(this.left);
        }
        if (this.right) {
            x += pathMostEdgesHelper(this.right);
        }
    
        if(max < x) max = x;
    
        return max;
    }

    pathMostEdgesHelper(tree) {
        if (tree === null) return 0;
    
        let x = 0;
    
        if (tree.left || tree.right) {
            x++;
        }
    
        if (tree.left) {
            x += pathMostEdgesHelper(tree.left);
        }
        if (tree.right) {
            x += pathMostEdgesHelper(tree.right);
        }
        return x;
    }

    treesEqual(t2) {
        if (this.data === null && t2.data === null) return true;
        if (this.data === null || t2.data === null) return false;
    
        let areEqual = true;
    
        if (this.left && t2.left) {
            if(this.left.data === t2.left.data && areEqual) {
                areEqual = treesEqual(this.left, t2.left);
            }
            else {
                areEqual = false;
            }
        }
        
        if (this.right && t2.right) {
            if(this.right.data === t2.right.data && areEqual) {
                areEqual = treesEqual(this.right, t2.right);
            }
            else {
                areEqual = false;
            }
        }
        return areEqual;
    }
}

function init() {
    let t1 = new Node(5)
    t1.left = new Node(3);
    t1.left.left = new Node(2);
    t1.left.right = new Node(5);
    t1.right = new Node(7);
    t1.right.left = new Node(1);
    t1.right.right = new Node(0);
    t1.right.right.left = new Node(2);
    t1.right.right.right = new Node(8);
    t1.right.right.right.right = new Node(5);

    let t2 = new Node(5)
    t2.left = new Node(3);
    t2.left.left = new Node(2);
    t2.left.right = new Node(5);
    t2.right = new Node(2);
    t2.right.right = new Node(2);
    t2.right.right.right = new Node(2);
    t2.right.right.right.left = new Node(2);
    t2.right.right.right.right = new Node(2);
    t2.right.right.right.right.right = new Node(2);
    t2.right.right.right.right.right.right = new Node(2);

    let t3 = new Node(5)
    t3.left = new Node(3);
    t3.left.left = new Node(2);
    t3.left.right = new Node(5);
    t3.right = new Node(7);
    t3.right.left = new Node(1);
    t3.right.right = new Node(0);
    t3.right.right.left = new Node(2);
    t3.right.right.right = new Node(8);
    t3.right.right.right.right = new Node(5);
    
    let t4 = new Node(5)
    t4.left = new Node(3);
    t4.left.left = new Node(2);
    t4.left.right = new Node(5);
    t4.right = new Node(1);
    t4.right.left = new Node(7);
    t4.right.right = new Node(0);
    t4.right.right.left = new Node(2);
    t4.right.right.right = new Node(8);
    t4.right.right.right.right = new Node(5);

    console.log('Answer in index.html with functions')
    document.getElementById("showResultT1").innerHTML = "<section>Tree t1 initialized.</section> <section>Number of childless nodes: " + countChildLess(t1) + ".</section> <section>Largest number of edges: " + pathMostEdges(t1) + ".</section>";
    document.getElementById("showResultT2").innerHTML = "<section>Tree t2 initialized.</section> <section>Number of childless nodes: " + countChildLess(t2) + ".</section> <section>Largest number of edges: " + pathMostEdges(t2) + ".</section>";
    document.getElementById("showResultT3").innerHTML = "<section>Tree t3 initialized.</section> <section>Number of childless nodes: " + countChildLess(t3) + ".</section> <section>Largest number of edges: " + pathMostEdges(t3) + ".</section>";
    document.getElementById("showResultT4").innerHTML = "<section>Tree t4 initialized.</section> <section>Number of childless nodes: " + countChildLess(t4) + ".</section> <section>Largest number of edges: " + pathMostEdges(t4) + ".</section>";

    document.getElementById("showResultT1T2").innerHTML = "<section>Tree t1 equals t2: " + treesEqual(t1, t2) + ".</section>";
    document.getElementById("showResultT1T3").innerHTML = "<section>Tree t1 equals t3: " + treesEqual(t1, t3) + ".</section>";
    document.getElementById("showResultT2T3").innerHTML = "<section>Tree t2 equals t3: " + treesEqual(t2, t3) + ".</section>";
    document.getElementById("showResultT3T4").innerHTML = "<section>Tree t3 equals t4: " + treesEqual(t3, t4) + ".</section>";
    

    console.log('Answer in console.log as OOP')
    console.log('childless: ' + t1.childlessCount());
    console.log('childless: ' + t2.childlessCount());
    console.log('childless: ' + t3.childlessCount());
    console.log('childless: ' + t4.childlessCount());
    console.log('treesEqual: ' + t1.treesEqual(t3));
    console.log('treesEqual: ' + t2.treesEqual(t1));
    console.log('treesEqual: ' + t3.treesEqual(t4));
    console.log('treesEqual: ' + t4.treesEqual(t2));
    console.log('MostEdges: ' + t1.pathMostEdges());
    console.log('MostEdges: ' + t2.pathMostEdges());
    console.log('MostEdges: ' + t3.pathMostEdges());
    console.log('MostEdges: ' + t4.pathMostEdges());
}

function countChildLess(tree) {
    if (tree === null) return 0;

    let x = 0;

    if (tree.left === null && tree.right === null) {
        x++;
    }
    if (tree.left) {
        x += countChildLess(tree.left);
    }
    if (tree.right) {
        x += countChildLess(tree.right);
    }
    return x;
}

function pathMostEdges(tree) {
    if (tree === null) return 0;

    let max = 0;
    let x = 0;

    if (tree.left) {
        x += pathMostEdgesHelper(tree.left);
    }
    if (tree.right) {
        x += pathMostEdgesHelper(tree.right);
    }

    if(max < x) max = x;

    return max;
}

function pathMostEdgesHelper(tree) {
    if (tree === null) return 0;

    let x = 0;

    if (tree.left || tree.right) {
        x++;
    }

    if (tree.left) {
        x += pathMostEdgesHelper(tree.left);
    }
    if (tree.right) {
        x += pathMostEdgesHelper(tree.right);
    }
    return x;
}

function treesEqual(t1, t2) {
    if (t1.data === null && t2.data === null) return true;
    if (t1.data === null || t2.data === null) return false;

    let areEqual = true;

    if (t1.left && t2.left) {
        if(t1.left.data === t2.left.data && areEqual) {
            areEqual = treesEqual(t1.left, t2.left);
        }
        else {
            areEqual = false;
        }
    }
    
    if (t1.right && t2.right) {
        if(t1.right.data === t2.right.data && areEqual) {
            areEqual = treesEqual(t1.right, t2.right);
        }
        else {
            areEqual = false;
        }
    }
    return areEqual;
}